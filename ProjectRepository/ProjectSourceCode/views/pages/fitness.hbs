<!DOCTYPE html>
<html lang="en">
<head>
    {{> header }} <!--Header template from head.hbs-->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>The Fitness Page</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"> <!--Using bootstrap for styling-->
</head>
<style>
    .modal-content { max-width: 400px; margin: auto; }
</style> <!--Centering the modal for the workout popup-->
<body>
    <div class="container mt-5">
        <h2 class="text-center">Welcome, {{first_name}}!</h2>
    </div>
    <div class="container mt-5">
        <div class="row">
            <!--Workout cards, feel free to add more workouts if needed-->
            <!--TODO: change workout names and descriptions to whatever workouts-->
            <div class="col-md-4 mb-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Cardio</h5> <!--Workout title-->
                        <p class="card-text">Boost your heart rate and endurance with running, cycling, and jumping rope, essential for cardiovascular health</p> <!--Workout desc.-->
                         <button class="start-workout-btn btn btn-primary" data-workout="1" data-bs-toggle="modal" data-bs-target="#workoutModal">Start Workout</button> <!--Opens timer popup-->
                        <!--data-workout for dynamic ID based modal manipulation-->
                    </div>
                </div>
            </div>
            <div class="col-md-4 mb-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Strength Traning</h5>
                        <p class="card-text">Build muscle and strength like lifting weighting to increase power and stamina</p>
                         <button class="start-workout-btn btn btn-primary" data-workout="2" data-bs-toggle="modal" data-bs-target="#workoutModal">Start Workout</button>
                    </div>
                </div>
            </div>
            <div class="col-md-4 mb-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Upper Body</h5>
                        <p class="card-text">Focus on arms, shoulders, chest and back with exercises like push-ups, pull-up, and rows to strengthen and tone</p>
                         <button class="start-workout-btn btn btn-primary" data-workout="3" data-bs-toggle="modal" data-bs-target="#workoutModal">Start Workout</button>
                    </div>
                </div>
            </div>
            <div class="col-md-4 mb-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Lower Body</h5>
                        <p class="card-text">Targets legs and glues through squats, lunges and deadlifts to build strength and support movement stability</p>
                         <button class="start-workout-btn btn btn-primary" data-workout="4" data-bs-toggle="modal" data-bs-target="#workoutModal">Start Workout</button>
                    </div>
                </div>
            </div>
            <div class="col-md-4 mb-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Core</h5>
                        <p class="card-text">Engage your abs and lower back, improving stability and balance with exercises like planks</p>
                         <button class="start-workout-btn btn btn-primary" data-workout="5" data-bs-toggle="modal" data-bs-target="#workoutModal">Start Workout</button>
                    </div>
                </div>
            </div>
            <div class="col-md-4 mb-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Flexibility</h5>
                        <p class="card-text">Increase range of motion and reduces risk of injury with joga and stretching exercises to keep muscles supple and ready for action</p>
                         <button class="start-workout-btn btn btn-primary" data-workout="6" data-bs-toggle="modal" data-bs-target="#workoutModal">Start Workout</button>
                    </div>
                </div>
            </div>
            <div class="col-md-4 mb-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Balance Training</h5>
                        <p class="card-text">Enhance stability and coordination with moves like single-leg stands or balance ball exercises</p>
                         <button class="start-workout-btn btn btn-primary" data-workout="7" data-bs-toggle="modal" data-bs-target="#workoutModal">Start Workout</button>
                    </div>
                </div>
            </div>
            <div class="col-md-4 mb-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">High Intensity Training</h5>
                        <p class="card-text">Intense bursts of activity followed by rest</p>
                         <button class="start-workout-btn btn btn-primary" data-workout="8" data-bs-toggle="modal" data-bs-target="#workoutModal">Start Workout</button>
                    </div>
                </div>
            </div>
            <div class="col-md-4 mb-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Meditation</h5>
                        <p class="card-text">Enhances mental clarity, focus, and relaxation</p>
                         <button class="start-workout-btn btn btn-primary" data-workout="9" data-bs-toggle="modal" data-bs-target="#workoutModal">Start Workout</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    {{> footer }}
    <!--Workout timer popup, dynamically starts according to the ID of the workout-->
    <!--Modal specifications:
        Workout title must be shown, linked dynamically to the data-workout ID.
        Workout description with similar fashion
        Timer display: Hour, Minute, Second, Millisecond
        Timer function to update timer
        Button to start workout (starts the timer)
        Button to pause workout (pauses the timer, does not reset)
        Button to end workout (resets the timer to 0, displays the amount of calories burnt using multiplier factor)
        Gives points to player (100 calories burnt = 1 point) (?)
    -->
    <!--Workout Timer-->
    <div class="modal fade" id="workoutModal" tabindex="-1" aria-labelledby="workoutModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="workoutTitle">Workout Timer</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button> <!--I hope this works (Closes the modal)-->
                </div>
                <div class="modal-body">
                    <p id="workoutDescription">Description of the workout.</p> 
                    <!--Display of timer inside modal-->
                    <p>Time: <span id="hours">00</span>:<span id="minutes">00</span>:<span id="seconds">00</span>:<span id="milliseconds">000</span></p> <!--Timer that functions with multiple time variables that go to milliseconds, but do we even need milliseconds?-->
                    <!-- Timer and End Workout buttons -->
                    <button id="timerBtn" class="btn btn-primary" onclick="toggleTimer()">Timer Start</button> <!--Starts the function and toggles timer on/off-->
                    <button class="btn btn-danger" onclick="endWorkout()">End Workout</button> <!--Ends workout and hopefully(?) resets the timer-->
                </div>
            </div>
        </div>
    </div>
    <!--Workout Summary
        Workout summary will show calories, points earned, and total workout time
        Seperate modal popup
    -->
    <div class="modal fade" id="workoutSummaryModal" tabindex="-1" aria-labelledby="workoutSummaryModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="workoutSummaryTitle">Workout Summary</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p id="summaryWorkout">Workout: </p>
                    <p id="summaryTime">Time Worked Out: </p>
                    <p id="summaryCalories">Calories Burned: </p>
                </div> <!--Show the user's stats-->
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
    <!--Loading in bootstrap js-->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        //Variables
        let workoutNumber = 0;
        let timer = { hours: 0, minutes: 0, seconds: 0, milliseconds: 0 }; //Timer is set to 0
        let timerInterval = null; //For timer updating
        const multipliers = { 1: 0.1, 2: 0.2, 3: 0.3, 4: 0.4, 5: 0.5, 6: 0.6, 7: 0.7, 8: 0.8, 9: 0.9 };
        //Alright so I don't know how calories work so I added these 9 factors that when multiplied with the time, outputs total calories burnt
        let isRunning = false; //Check if timer is on
        let originalTitle = ""; //Title for resetting later

        //Event listeners that depend on the click of the Start Workout button
        document.addEventListener('DOMContentLoaded', () => { //DOM content checks for complete parse of the document, does not check for stylesheets
            document.querySelectorAll('.start-workout-btn').forEach(button => { //Check for star workout button click (below)
                button.addEventListener('click', () => {
                    //Set variable workoutNumber to the ID of workout
                    workoutNumber = parseInt(button.getAttribute('data-workout'));
                    //Set the title and description dynamically to whatever the workout ID is
                    document.getElementById('workoutTitle').innerText = `Workout ${workoutNumber}`;
                    document.getElementById('workoutDescription').innerText = `Description for Workout ${workoutNumber}`;
                    resetTimer(); //resetting timer
                });
            });
        });

        //Timer toggling, pausing and restarting the timer, does not reset timer to 0.
        function toggleTimer() {
            if (!isRunning) { //Is the timer not running?
                isRunning = true; //It is now
                document.getElementById('timerBtn').innerText = "Timer End"; //If the timer is running the text is changed to "End"
                timerInterval = setInterval(updateTimer, 10); //Updating the timer every 10 ms
            } else { //Is the timer running
                isRunning = false; //Nah, pause the timer
                document.getElementById('timerBtn').innerText = "Timer Start"; //If the timer is not running the text is changed to "Start"
                clearInterval(timerInterval); //Stop updating the timer, bro
            }
        }
        //Function to update the timer
        function updateTimer() {
            timer.milliseconds += 10; //Add 10ms
            if (timer.milliseconds >= 1000) { //1000ms = 1s
                timer.milliseconds = 0; //Since we have 1s, 1000ms is reset to 0ms
                timer.seconds++; //Add 1s
            }
            if (timer.seconds >= 60) { //60s = 1m
                timer.seconds = 0; //Since we have 1m, 60s is reset to 0s
                timer.minutes++; //Add 1m
            }
            if (timer.minutes >= 60) { //60m = 1h
                timer.minutes = 0; //Since we have 1h, 60m is reset to 0m
                timer.hours++; //Add 1h 
            } //Guys should we add a day timer too? Are people working out for days or what?

            //Timer display update
            document.getElementById('hours').innerText = String(timer.hours).padStart(2, '0');
            document.getElementById('minutes').innerText = String(timer.minutes).padStart(2, '0');
            document.getElementById('seconds').innerText = String(timer.seconds).padStart(2, '0');
            document.getElementById('milliseconds').innerText = String(timer.milliseconds).padStart(3, '0'); //Displays 3 digits
        }
        //Ending workout, also need to calculate the number of calories burnt, workout multiplier x timer
        function endWorkout() {
            clearInterval(timerInterval); //Clear the timer
            isRunning = false; //Timer is running no more!!
            document.getElementById('timerBtn').innerText = "Timer Start"; //Reset timer back to "timer start"

            //We calculate the amount of seconds in the timer
            const totalSeconds = timer.hours * 3600 + timer.minutes * 60 + timer.seconds + (timer.milliseconds / 1000);
            const caloriesBurned = (totalSeconds * multipliers[workoutNumber]).toFixed(2); //Multiplies the multiplier of the workout (listed in variables) with seconds, returns caloriesBurned
            const timeWorkedOut = `${String(timer.hours).padStart(2, '0')}:${String(timer.minutes).padStart(2, '0')}:${String(timer.seconds).padStart(2, '0')}`; //Worked out time, displays with hour : minute : second

            //Staging workout summary data so that it shows up in the summary modal
            document.getElementById('summaryWorkout').innerText = `Workout: Workout ${workoutNumber}`;
            document.getElementById('summaryTime').innerText = `Time Worked Out: ${timeWorkedOut}`;
            document.getElementById('summaryCalories').innerText = `Calories Burned: ${caloriesBurned} kcal`;

            //Resets the timer cuz you're done
            resetTimer();
            const workoutModal = bootstrap.Modal.getInstance(document.getElementById('workoutModal'));
            workoutModal.hide(); //Closing the modal to open the summary modal
            const workoutSummaryModal = new bootstrap.Modal(document.getElementById('workoutSummaryModal'));
            workoutSummaryModal.show(); //Show the summary
        }
        //Reset the timer to 0
        function resetTimer() {
            timer = { hours: 0, minutes: 0, seconds: 0, milliseconds: 0 }; //Set timer values to zero
            isRunning = false; //Timer aint running no more
            document.getElementById('timerBtn').innerText = "Timer Start"; //Resetting the text so that it "resets" back to Timer Start

            //Update timer display to show all zeroes
            document.getElementById('hours').innerText = '00';
            document.getElementById('minutes').innerText = '00';
            document.getElementById('seconds').innerText = '00';
            document.getElementById('milliseconds').innerText = '000';
        }

        //TODO: Point system, 100 kcal = 1 point (?)
        //Maybe add this to the endWorkout function:
        //const points = cal / 100
        //if points > 0, "congrats bro"
        //new function: addPoints(points)

        //TODO: addPoints() function
        //<form action="/login" method="POST"> //Okay not this because we're writing a script but you get the gist of it
        //{{user}}
        //points: points
        //Maybe error message if unresponsive, success message if points are updated
        //</form>

    </script>
</body>
</html>
